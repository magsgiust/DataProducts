"SMU",
"St John's",
"Texas",
"TX Southern",
"UAB",
"UC Irvine",
"UCLA",
"Utah",
"VA Commonwealth",
"Valparaiso",
"Villanova",
"Virginia",
"West Virginia",
"Wichita St",
"Wisconsin",
"Wofford",
"Wyoming",
"Xavier"),
selected = "Arizona"),
checkboxInput(inputId = "predicted_outcome",
label = strong("Show predicted outcome"),
value = FALSE),
checkboxInput(inputId = "actual_outcome",
label = strong("Show actual outcome"),
value = FALSE),
submitButton('Submit')
),
mainPanel(h3('Results'),
h4('You entered Team A'),
verbatimTextOutput("teamA"),
h4('vs. Team B'),
verbatimTextOutput("teamB"),
h4('The favorite for this matchup is:'),
verbatimTextOutput("pred_team"),
h4('The winner of this matchup was:'),
verbatimTextOutput("winning_team")
)
)
)
#read in the data
teams <- "/Users/maggiepieper/Documents/DataScience/Kaggle/teams.csv"
tourneyResultsThru2015 <- "/Users/maggiepieper/Documents/DataScience/Kaggle/tourney_compact_results_thru_2015.csv"
tourneySeeds2015 <- "/Users/maggiepieper/Documents/DataScience/Kaggle/tourney_seeds_2015.csv"
tourneySeeds <- "/Users/maggiepieper/Documents/DataScience/Kaggle/tourney_seeds.csv"
teams <- read.csv(teams)
tourneyResultsThru2015 <- read.csv(tourneyResultsThru2015,header=T)
tourneySeeds2015 <- read.csv(tourneySeeds2015,header=T)
tourneySeeds <- read.csv(tourneySeeds,header=T)
tourneySeeds <- rbind(tourneySeeds,tourneySeeds2015)
remove(tourneySeeds2015)
library(dplyr);
tourneySeeds <- tourneySeeds[tourneySeeds$season>2002,]
tourneyResultsThru2015 <- tourneyResultsThru2015[tourneyResultsThru2015$season>2002,]
tourneyResultsThru2015 <- select(tourneyResultsThru2015,-wloc,-numot)
tourneySeeds <- tourneySeeds %>% mutate(season=as.factor(season),
seed=as.factor(seed),
team=as.factor(team))
teams$team <- as.character(teams$team_id)
# get the daynum of the last win in the tournament for each team by year from tourneyResultsThru2015
byTeam <- tourneyResultsThru2015 %>% group_by(season,team=wteam)
results <- byTeam %>% summarise(lastWin=max(daynum)); remove(byTeam)
results$season <- as.factor(results$season);results$team <- as.factor(results$team)
tourneySeeds$rank <- as.factor(substr(tourneySeeds$seed,2,3));tourneySeeds$region <- as.factor(substr(tourneySeeds$seed,1,1))
# leftjoin on tourneyVars, if na then that means they didn't have any wins and were knocked out in R1
tourneySeeds <- left_join(tourneySeeds,teams,by=c("team"))
tourneySeeds <- left_join(tourneySeeds,results,by=c("season","team")); remove(results)
tourneySeeds <- tourneySeeds %>% select(season,team,rank,team_name,lastWin)
tourneyWins <- tourneySeeds$lastWin
tourneyWins <- ifelse(is.na(tourneyWins),0,
ifelse(tourneyWins<136,0,
ifelse(tourneyWins<138,1,
ifelse(tourneyWins<140,2,
ifelse(tourneyWins<145,3,
ifelse(tourneyWins<147,4,
ifelse(tourneyWins<154,5,6)))))))
tourneySeeds$lastWin <- tourneyWins; remove(tourneyWins)
tourneySeeds$rank <- as.numeric(tourneySeeds$rank)
possibleMatches <- left_join(x=tourneySeeds,y=tourneySeeds,by=c("season"))
possibleMatches$team.x <- as.integer(possibleMatches$team.x)
possibleMatches$team.y <- as.integer(possibleMatches$team.y)
possibleMatches <- possibleMatches[possibleMatches$team.x<possibleMatches$team.y,]
possibleMatches$pred <- ifelse(possibleMatches$rank.x<=possibleMatches$rank.y,
possibleMatches$team.x,
possibleMatches$team.y)
head(possibleMatches)
possibleMatches$team.x<-as.character(possibleMatches$team.x)
possibleMatches$team.y<-as.character(possibleMatches$team.y)
results <- tourneyResultsThru2015 %>% mutate(season=as.factor(season),
win=wteam,
team.x=as.character(ifelse(wteam<lteam,wteam,lteam)),
team.y=as.character(ifelse(wteam>lteam,wteam,lteam))) %>%
select(season,team.x,team.y,win)
remove(tourneyResultsThru2015); remove(tourneySeeds);remove(teams)
results$team.x<-as.character(results$team.x)
results$team.y<-as.character(results$team.y)
results <- inner_join(possibleMatches,results,by=c("season","team.x","team.y"))
results <- results %>% mutate(perf=ifelse(pred==win,1,-1))
results$pred<-as.character(results$pred)
results$win<-as.character(results$win)
results$pred_team <- ifelse(grepl(results$pred,results$team.x),
as.character(results$team_name.x),
as.character(results$team_name.y))
results$winning_team <- ifelse(grepl(results$win,results$team.x),
as.character(results$team_name.x),
as.character(results$team_name.y))
mycols <- c("team_name.x","team_name.y","pred_team","winning_team")
myOutcome <- results[results$season==2015,mycols]
colnames(myOutcome)<-c("teamA","teamB","pred_team","winning_team")
shinyServer(function(input, output) {
output$inputValue <- renderPrint({
input$teamA
input$teamB})
output$pred_team <- renderPrint({
myOutcome[teamA=input$teamA & teamB=input$teamB,3]
})
output$winning_team <- renderPrint({
myOutcome[teamA=input$teamA & teamB=input$teamB,4]
})
}
)
output$newHist <- renderPlot({
hist(galton$child, xlab='child height', col='lightblue',main='Histogram') mu <- input$mu
lines(c(mu, mu), c(0, 200),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
})
shinyServer(function(input, output) {
output$main_plot <- renderPlot({
hist(faithful$eruptions,
probability = TRUE,
breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)",
main = "Geyser eruption duration")
if (input$individual_obs) {
rug(faithful$eruptions)
}
if (input$density) {
dens <- density(faithful$eruptions,
adjust = input$bw_adjust)
lines(dens, col = "blue")
}
})
})
setwd("/Users/maggiepieper/Documents/classes/DevelopingDataProducts/myProj/")
runApp()
#read in the data
teams <- "/Users/maggiepieper/Documents/DataScience/Kaggle/teams.csv"
tourneyResultsThru2015 <- "/Users/maggiepieper/Documents/DataScience/Kaggle/tourney_compact_results_thru_2015.csv"
tourneySeeds2015 <- "/Users/maggiepieper/Documents/DataScience/Kaggle/tourney_seeds_2015.csv"
tourneySeeds <- "/Users/maggiepieper/Documents/DataScience/Kaggle/tourney_seeds.csv"
teams <- read.csv(teams)
tourneyResultsThru2015 <- read.csv(tourneyResultsThru2015,header=T)
tourneySeeds2015 <- read.csv(tourneySeeds2015,header=T)
tourneySeeds <- read.csv(tourneySeeds,header=T)
tourneySeeds <- rbind(tourneySeeds,tourneySeeds2015)
remove(tourneySeeds2015)
library(dplyr);
tourneySeeds <- tourneySeeds[tourneySeeds$season>2002,]
tourneyResultsThru2015 <- tourneyResultsThru2015[tourneyResultsThru2015$season>2002,]
tourneyResultsThru2015 <- select(tourneyResultsThru2015,-wloc,-numot)
tourneySeeds <- tourneySeeds %>% mutate(season=as.factor(season),
seed=as.factor(seed),
team=as.factor(team))
teams$team <- as.character(teams$team_id)
# get the daynum of the last win in the tournament for each team by year from tourneyResultsThru2015
byTeam <- tourneyResultsThru2015 %>% group_by(season,team=wteam)
results <- byTeam %>% summarise(lastWin=max(daynum)); remove(byTeam)
results$season <- as.factor(results$season);results$team <- as.factor(results$team)
tourneySeeds$rank <- as.factor(substr(tourneySeeds$seed,2,3));tourneySeeds$region <- as.factor(substr(tourneySeeds$seed,1,1))
# leftjoin on tourneyVars, if na then that means they didn't have any wins and were knocked out in R1
tourneySeeds <- left_join(tourneySeeds,teams,by=c("team"))
tourneySeeds <- left_join(tourneySeeds,results,by=c("season","team")); remove(results)
tourneySeeds <- tourneySeeds %>% select(season,team,rank,team_name,lastWin)
tourneyWins <- tourneySeeds$lastWin
tourneyWins <- ifelse(is.na(tourneyWins),0,
ifelse(tourneyWins<136,0,
ifelse(tourneyWins<138,1,
ifelse(tourneyWins<140,2,
ifelse(tourneyWins<145,3,
ifelse(tourneyWins<147,4,
ifelse(tourneyWins<154,5,6)))))))
tourneySeeds$lastWin <- tourneyWins; remove(tourneyWins)
tourneySeeds$rank <- as.numeric(tourneySeeds$rank)
possibleMatches <- left_join(x=tourneySeeds,y=tourneySeeds,by=c("season"))
possibleMatches$team.x <- as.integer(possibleMatches$team.x)
possibleMatches$team.y <- as.integer(possibleMatches$team.y)
possibleMatches <- possibleMatches[possibleMatches$team.x<possibleMatches$team.y,]
possibleMatches$pred <- ifelse(possibleMatches$rank.x<=possibleMatches$rank.y,
possibleMatches$team.x,
possibleMatches$team.y)
head(possibleMatches)
possibleMatches$team.x<-as.character(possibleMatches$team.x)
possibleMatches$team.y<-as.character(possibleMatches$team.y)
results <- tourneyResultsThru2015 %>% mutate(season=as.factor(season),
win=wteam,
team.x=as.character(ifelse(wteam<lteam,wteam,lteam)),
team.y=as.character(ifelse(wteam>lteam,wteam,lteam))) %>%
select(season,team.x,team.y,win)
remove(tourneyResultsThru2015); remove(tourneySeeds);remove(teams)
results$team.x<-as.character(results$team.x)
results$team.y<-as.character(results$team.y)
results <- inner_join(possibleMatches,results,by=c("season","team.x","team.y"))
results <- results %>% mutate(perf=ifelse(pred==win,1,-1))
results$pred<-as.character(results$pred)
results$win<-as.character(results$win)
results$pred_team <- ifelse(grepl(results$pred,results$team.x),
as.character(results$team_name.x),
as.character(results$team_name.y))
results$winning_team <- ifelse(grepl(results$win,results$team.x),
as.character(results$team_name.x),
as.character(results$team_name.y))
mycols <- c("team_name.x","team_name.y","pred_team","winning_team")
myOutcome <- results[results$season==2015,mycols]
colnames(myOutcome)<-c("teamA","teamB","pred_team","winning_team")
shinyServer(function(input, output) {
output$inputValue <- renderPrint({
input$teamA
input$teamB})
output$pred_team <- renderPrint({
myOutcome[myOutcome$teamA==input$teamA & myOutcome$teamB==input$teamB,3]
})
output$winning_team <- renderPrint({
myOutcome[myOutcome$teamA==input$teamA & myOutcome$teamB==input$teamB,4]
})
}
)
output$newHist <- renderPlot({
hist(galton$child, xlab='child height', col='lightblue',main='Histogram') mu <- input$mu
lines(c(mu, mu), c(0, 200),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
})
shinyServer(function(input, output) {
output$main_plot <- renderPlot({
hist(faithful$eruptions,
probability = TRUE,
breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)",
main = "Geyser eruption duration")
if (input$individual_obs) {
rug(faithful$eruptions)
}
if (input$density) {
dens <- density(faithful$eruptions,
adjust = input$bw_adjust)
lines(dens, col = "blue")
}
})
})
setwd("/Users/maggiepieper/Documents/classes/DevelopingDataProducts/myProj/")
runApp()
#read in the data
teams <- "/Users/maggiepieper/Documents/DataScience/Kaggle/teams.csv"
tourneyResultsThru2015 <- "/Users/maggiepieper/Documents/DataScience/Kaggle/tourney_compact_results_thru_2015.csv"
tourneySeeds2015 <- "/Users/maggiepieper/Documents/DataScience/Kaggle/tourney_seeds_2015.csv"
tourneySeeds <- "/Users/maggiepieper/Documents/DataScience/Kaggle/tourney_seeds.csv"
teams <- read.csv(teams)
tourneyResultsThru2015 <- read.csv(tourneyResultsThru2015,header=T)
tourneySeeds2015 <- read.csv(tourneySeeds2015,header=T)
tourneySeeds <- read.csv(tourneySeeds,header=T)
tourneySeeds <- rbind(tourneySeeds,tourneySeeds2015)
remove(tourneySeeds2015)
library(dplyr);
tourneySeeds <- tourneySeeds[tourneySeeds$season>2002,]
tourneyResultsThru2015 <- tourneyResultsThru2015[tourneyResultsThru2015$season>2002,]
tourneyResultsThru2015 <- select(tourneyResultsThru2015,-wloc,-numot)
tourneySeeds <- tourneySeeds %>% mutate(season=as.factor(season),
seed=as.factor(seed),
team=as.factor(team))
teams$team <- as.character(teams$team_id)
# get the daynum of the last win in the tournament for each team by year from tourneyResultsThru2015
byTeam <- tourneyResultsThru2015 %>% group_by(season,team=wteam)
results <- byTeam %>% summarise(lastWin=max(daynum)); remove(byTeam)
results$season <- as.factor(results$season);results$team <- as.factor(results$team)
tourneySeeds$rank <- as.factor(substr(tourneySeeds$seed,2,3));tourneySeeds$region <- as.factor(substr(tourneySeeds$seed,1,1))
# leftjoin on tourneyVars, if na then that means they didn't have any wins and were knocked out in R1
tourneySeeds <- left_join(tourneySeeds,teams,by=c("team"))
tourneySeeds <- left_join(tourneySeeds,results,by=c("season","team")); remove(results)
tourneySeeds <- tourneySeeds %>% select(season,team,rank,team_name,lastWin)
tourneyWins <- tourneySeeds$lastWin
tourneyWins <- ifelse(is.na(tourneyWins),0,
ifelse(tourneyWins<136,0,
ifelse(tourneyWins<138,1,
ifelse(tourneyWins<140,2,
ifelse(tourneyWins<145,3,
ifelse(tourneyWins<147,4,
ifelse(tourneyWins<154,5,6)))))))
tourneySeeds$lastWin <- tourneyWins; remove(tourneyWins)
tourneySeeds$rank <- as.numeric(tourneySeeds$rank)
possibleMatches <- left_join(x=tourneySeeds,y=tourneySeeds,by=c("season"))
possibleMatches$team.x <- as.integer(possibleMatches$team.x)
possibleMatches$team.y <- as.integer(possibleMatches$team.y)
possibleMatches <- possibleMatches[possibleMatches$team.x<possibleMatches$team.y,]
possibleMatches$pred <- ifelse(possibleMatches$rank.x<=possibleMatches$rank.y,
possibleMatches$team.x,
possibleMatches$team.y)
head(possibleMatches)
possibleMatches$team.x<-as.character(possibleMatches$team.x)
possibleMatches$team.y<-as.character(possibleMatches$team.y)
results <- tourneyResultsThru2015 %>% mutate(season=as.factor(season),
win=wteam,
team.x=as.character(ifelse(wteam<lteam,wteam,lteam)),
team.y=as.character(ifelse(wteam>lteam,wteam,lteam))) %>%
select(season,team.x,team.y,win)
remove(tourneyResultsThru2015); remove(tourneySeeds);remove(teams)
results$team.x<-as.character(results$team.x)
results$team.y<-as.character(results$team.y)
results <- inner_join(possibleMatches,results,by=c("season","team.x","team.y"))
results <- results %>% mutate(perf=ifelse(pred==win,1,-1))
results$pred<-as.character(results$pred)
results$win<-as.character(results$win)
results$pred_team <- ifelse(grepl(results$pred,results$team.x),
as.character(results$team_name.x),
as.character(results$team_name.y))
results$winning_team <- ifelse(grepl(results$win,results$team.x),
as.character(results$team_name.x),
as.character(results$team_name.y))
mycols <- c("team_name.x","team_name.y","pred_team","winning_team")
myOutcome <- results[results$season==2015,mycols]
colnames(myOutcome)<-c("teamA","teamB","pred_team","winning_team")
shinyServer(function(input, output) {
output$inputValue <- renderPrint({
input$teamA
input$teamB})
output$pred_team <- renderPrint({
myOutcome[myOutcome$teamA==input$teamA & myOutcome$teamB==input$teamB,3]
})
output$winning_team <- renderPrint({
myOutcome[myOutcome$teamA==input$teamA & myOutcome$teamB==input$teamB,4]
})
}
)
setwd("/Users/maggiepieper/Documents/classes/DevelopingDataProducts/myProj/")
runApp()
#read in the data
teams <- "/Users/maggiepieper/Documents/DataScience/Kaggle/teams.csv"
tourneyResultsThru2015 <- "/Users/maggiepieper/Documents/DataScience/Kaggle/tourney_compact_results_thru_2015.csv"
tourneySeeds2015 <- "/Users/maggiepieper/Documents/DataScience/Kaggle/tourney_seeds_2015.csv"
tourneySeeds <- "/Users/maggiepieper/Documents/DataScience/Kaggle/tourney_seeds.csv"
teams <- read.csv(teams)
tourneyResultsThru2015 <- read.csv(tourneyResultsThru2015,header=T)
tourneySeeds2015 <- read.csv(tourneySeeds2015,header=T)
tourneySeeds <- read.csv(tourneySeeds,header=T)
tourneySeeds <- rbind(tourneySeeds,tourneySeeds2015)
remove(tourneySeeds2015)
library(dplyr);
tourneySeeds <- tourneySeeds[tourneySeeds$season>2002,]
tourneyResultsThru2015 <- tourneyResultsThru2015[tourneyResultsThru2015$season>2002,]
tourneyResultsThru2015 <- select(tourneyResultsThru2015,-wloc,-numot)
tourneySeeds <- tourneySeeds %>% mutate(season=as.factor(season),
seed=as.factor(seed),
team=as.factor(team))
teams$team <- as.character(teams$team_id)
# get the daynum of the last win in the tournament for each team by year from tourneyResultsThru2015
byTeam <- tourneyResultsThru2015 %>% group_by(season,team=wteam)
results <- byTeam %>% summarise(lastWin=max(daynum)); remove(byTeam)
results$season <- as.factor(results$season);results$team <- as.factor(results$team)
tourneySeeds$rank <- as.factor(substr(tourneySeeds$seed,2,3));tourneySeeds$region <- as.factor(substr(tourneySeeds$seed,1,1))
# leftjoin on tourneyVars, if na then that means they didn't have any wins and were knocked out in R1
tourneySeeds <- left_join(tourneySeeds,teams,by=c("team"))
tourneySeeds <- left_join(tourneySeeds,results,by=c("season","team")); remove(results)
tourneySeeds <- tourneySeeds %>% select(season,team,rank,team_name,lastWin)
tourneyWins <- tourneySeeds$lastWin
tourneyWins <- ifelse(is.na(tourneyWins),0,
ifelse(tourneyWins<136,0,
ifelse(tourneyWins<138,1,
ifelse(tourneyWins<140,2,
ifelse(tourneyWins<145,3,
ifelse(tourneyWins<147,4,
ifelse(tourneyWins<154,5,6)))))))
tourneySeeds$lastWin <- tourneyWins; remove(tourneyWins)
tourneySeeds$rank <- as.numeric(tourneySeeds$rank)
possibleMatches <- left_join(x=tourneySeeds,y=tourneySeeds,by=c("season"))
possibleMatches$team.x <- as.integer(possibleMatches$team.x)
possibleMatches$team.y <- as.integer(possibleMatches$team.y)
possibleMatches <- possibleMatches[possibleMatches$team.x<possibleMatches$team.y,]
possibleMatches$pred <- ifelse(possibleMatches$rank.x<=possibleMatches$rank.y,
possibleMatches$team.x,
possibleMatches$team.y)
head(possibleMatches)
possibleMatches$team.x<-as.character(possibleMatches$team.x)
possibleMatches$team.y<-as.character(possibleMatches$team.y)
results <- tourneyResultsThru2015 %>% mutate(season=as.factor(season),
win=wteam,
team.x=as.character(ifelse(wteam<lteam,wteam,lteam)),
team.y=as.character(ifelse(wteam>lteam,wteam,lteam))) %>%
select(season,team.x,team.y,win)
remove(tourneyResultsThru2015); remove(tourneySeeds);remove(teams)
results$team.x<-as.character(results$team.x)
results$team.y<-as.character(results$team.y)
results <- inner_join(possibleMatches,results,by=c("season","team.x","team.y"))
results <- results %>% mutate(perf=ifelse(pred==win,1,-1))
results$pred<-as.character(results$pred)
results$win<-as.character(results$win)
results$pred_team <- ifelse(grepl(results$pred,results$team.x),
as.character(results$team_name.x),
as.character(results$team_name.y))
results$winning_team <- ifelse(grepl(results$win,results$team.x),
as.character(results$team_name.x),
as.character(results$team_name.y))
mycols <- c("team_name.x","team_name.y","pred_team","winning_team")
myOutcome <- results[results$season==2015,mycols]
View(myOutcome)
setwd("/Users/maggiepieper/Documents/classes/DevelopingDataProducts/myProj/")
runApp()
setwd("/Users/maggiepieper/Documents/classes/DevelopingDataProducts/myProj/")
runApp()
setwd("/Users/maggiepieper/Documents/classes/DevelopingDataProducts/myProj/")
runApp()
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='magsgiust', token='81E2977B8F6A6B409B099FB6FAA8A783', secret='jiRtlkTuCWdg6bhv4Q6sCFXEPtxn40fXCG73Hgo2')
setwd("/Users/maggiepieper/Documents/classes/DevelopingDataProducts/myProj/")
runApp()
library(shinyapps)
shinyapps::deployApp("/Users/maggiepieper/Documents/classes/DevelopingDataProducts/myProj/")
teams <- "/Users/maggiepieper/Documents/DataScience/Kaggle/teams.csv"
tourneyResultsThru2015 <- "/Users/maggiepieper/Documents/DataScience/Kaggle/tourney_compact_results_thru_2015.csv"
tourneySeeds2015 <- "/Users/maggiepieper/Documents/DataScience/Kaggle/tourney_seeds_2015.csv"
tourneySeeds <- "/Users/maggiepieper/Documents/DataScience/Kaggle/tourney_seeds.csv"
teams <- read.csv(teams)
tourneyResultsThru2015 <- read.csv(tourneyResultsThru2015,header=T)
tourneySeeds2015 <- read.csv(tourneySeeds2015,header=T)
tourneySeeds <- read.csv(tourneySeeds,header=T)
tourneySeeds <- rbind(tourneySeeds,tourneySeeds2015)
remove(tourneySeeds2015)
library(dplyr);
tourneySeeds <- tourneySeeds[tourneySeeds$season>2002,]
tourneyResultsThru2015 <- tourneyResultsThru2015[tourneyResultsThru2015$season>2002,]
tourneyResultsThru2015 <- select(tourneyResultsThru2015,-wloc,-numot)
tourneySeeds <- tourneySeeds %>% mutate(season=as.factor(season),
seed=as.factor(seed),
team=as.factor(team))
teams$team <- as.character(teams$team_id)
# get the daynum of the last win in the tournament for each team by year from tourneyResultsThru2015
byTeam <- tourneyResultsThru2015 %>% group_by(season,team=wteam)
results <- byTeam %>% summarise(lastWin=max(daynum)); remove(byTeam)
results$season <- as.factor(results$season);results$team <- as.factor(results$team)
tourneySeeds$rank <- as.factor(substr(tourneySeeds$seed,2,3));tourneySeeds$region <- as.factor(substr(tourneySeeds$seed,1,1))
# leftjoin on tourneyVars, if na then that means they didn't have any wins and were knocked out in R1
tourneySeeds <- left_join(tourneySeeds,teams,by=c("team"))
tourneySeeds <- left_join(tourneySeeds,results,by=c("season","team")); remove(results)
tourneySeeds <- tourneySeeds %>% select(season,team,rank,team_name,lastWin)
tourneyWins <- tourneySeeds$lastWin
tourneyWins <- ifelse(is.na(tourneyWins),0,
ifelse(tourneyWins<136,0,
ifelse(tourneyWins<138,1,
ifelse(tourneyWins<140,2,
ifelse(tourneyWins<145,3,
ifelse(tourneyWins<147,4,
ifelse(tourneyWins<154,5,6)))))))
tourneySeeds$lastWin <- tourneyWins; remove(tourneyWins)
tourneySeeds$rank <- as.numeric(tourneySeeds$rank)
possibleMatches <- left_join(x=tourneySeeds,y=tourneySeeds,by=c("season"))
possibleMatches$team.x <- as.integer(possibleMatches$team.x)
possibleMatches$team.y <- as.integer(possibleMatches$team.y)
possibleMatches <- possibleMatches[possibleMatches$team.x<possibleMatches$team.y,]
possibleMatches$pred <- ifelse(possibleMatches$rank.x<=possibleMatches$rank.y,
possibleMatches$team.x,
possibleMatches$team.y)
head(possibleMatches)
possibleMatches$team.x<-as.character(possibleMatches$team.x)
possibleMatches$team.y<-as.character(possibleMatches$team.y)
results <- tourneyResultsThru2015 %>% mutate(season=as.factor(season),
win=wteam,
team.x=as.character(ifelse(wteam<lteam,wteam,lteam)),
team.y=as.character(ifelse(wteam>lteam,wteam,lteam))) %>%
select(season,team.x,team.y,win)
remove(tourneyResultsThru2015); remove(tourneySeeds);remove(teams)
results$team.x<-as.character(results$team.x)
results$team.y<-as.character(results$team.y)
results <- inner_join(possibleMatches,results,by=c("season","team.x","team.y"))
results <- results %>% mutate(perf=ifelse(pred==win,1,-1))
results$pred<-as.character(results$pred)
results$win<-as.character(results$win)
results$pred_team <- ifelse(grepl(results$pred,results$team.x),
as.character(results$team_name.x),
as.character(results$team_name.y))
results$winning_team <- ifelse(grepl(results$win,results$team.x),
as.character(results$team_name.x),
as.character(results$team_name.y))
mycols <- c("team_name.x","team_name.y","pred_team","winning_team")
myOutcome <- results[results$season==2015,mycols]
myOutcome$teamA=="Dayton" & myOutcome$teamB=="Providence"
ifelse(myOutcome$teamA=="Dayton" & myOutcome$teamB=="Providence","TRUE","FALSE")
ifelse(is.null(myOutcome$teamA=="Dayton" & myOutcome$teamB=="Providence")
)
ifelse(length(myOutcome$teamA=="Dayton" & myOutcome$teamB=="Providence")>0,"true","false")
ifelse(length(myOutcome$teamA=="Providence" & myOutcome$teamB=="Dayton")>0,
myOutcome[myOutcome$teamA=="Providence" & myOutcome$teamB=="Dayton",
3],
print("Sorry, this is not a valid matchup.  Please try again."))
ifelse(length(myOutcome$teamA=="Providence" & myOutcome$teamB=="Dayton")>0,
myOutcome[myOutcome$teamA=="Providence" & myOutcome$teamB=="Dayton",
3],
"Sorry, this is not a valid matchup.  Please try again.")
coursera-data-science.dcf
setwd("~/GitHub/DataProducts/Project/")
ls()
setwd("./GitHub/DataProducts/Project/")
setwd("/Users/maggiepieper/GitHub/DataProducts/Project/")
ls()
runApp()
runApp()
setwd("~/GitHub/DataProducts/Project/")
runApp()
library(shinyapps)
shinyapps::deployApp("~/GitHub/DataProducts/Project/")
devtools::install_github('rstudio/packrat')
shinyapps::deployApp("~/GitHub/DataProducts/Project/")
